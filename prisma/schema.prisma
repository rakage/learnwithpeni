// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String   @id @db.Uuid
  email            String   @unique
  name             String?
  image            String?
  role             Role     @default(STUDENT)
  stripeCustomerId String?  @unique
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  progress    Progress[]
  payments    Payment[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float
  image       String?
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  modules     Module[]
  enrollments Enrollment[]
  payments    Payment[]

  @@map("courses")
}

model Module {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String? // Rich text content
  videoUrl    String? // YouTube/Vimeo/Self-hosted video URL
  fileUrl     String? // PDF/DOC file URL
  type        ModuleType @default(TEXT)
  order       Int
  duration    Int? // Duration in minutes
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("modules")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  courseId  String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(cuid())
  userId      String    @db.Uuid
  moduleId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("progress")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String        @db.Uuid
  courseId        String
  stripePaymentId String        @unique
  amount          Float
  currency        String        @default("usd")
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  ADMIN
  STUDENT
}

enum ModuleType {
  TEXT
  VIDEO
  FILE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
